<!DOCTYPE html>
<html>
<head>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      -webkit-font-smoothing: antialiased;
    }

    body {
      min-height: 100vh;
      font-family: system-ui, -apple-system, sans-serif;
      background: #000;
      transition: background-color 0.5s ease;
      display: flex;
      flex-direction: column;
      position: relative;
    }
    
    #visitor-counter {
      position: fixed;
      bottom: 10px;
      left: 0;
      right: 0;
      text-align: center;
      z-index: 100;
      pointer-events: none;
      opacity: 0;
      transition: opacity 0.5s ease;
    }
    
    #count-display {
      background: rgba(0, 0, 0, 0.7);
      color: #0f0;
      padding: 3px 8px;
      display: inline-block;
      border-radius: 3px;
      font-family: monospace;
      letter-spacing: 2px;
      height: 24px;
      overflow: hidden;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
      backdrop-filter: blur(2px);
    }
    
    .dark #count-display {
      background: rgba(0, 0, 0, 0.7);
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    }

    input {
      display: block;
      width: 335px;
      font-size: 34px;
      line-height: 44px;
      background: transparent;
      border: none;
      border-bottom: 1px dotted rgba(0, 0, 0, 0.4);
      padding: 5px 0;
      border-radius: 0;
      margin-bottom: 15px;
      font-family: inherit;
    }

    input:focus {
      outline: none;
      border-bottom-color: rgba(0, 0, 0, 0.8);
    }

    #wrap {
      position: absolute;
      width: 340px;
      height: 180px;
      top: 50%;
      left: 50%;
      margin: -90px -170px;
    }

    .dark input {
      color: #fff;
      border-bottom-color: rgba(255, 255, 255, 0.4);
    }

    .dark input:focus {
      border-bottom-color: rgba(255, 255, 255, 0.8);
    }

    .dark input::placeholder {
      color: rgba(255, 255, 255, 0.6);
    }

    input::placeholder {
      color: rgba(0, 0, 0, 0.6);
    }

    #shortcuts {
      margin-top: 25px;
      font-size: 14px;
      color: rgba(0, 0, 0, 0.75);
    }

    .shortcut-title {
      display: block;
      margin-bottom: 8px;
      font-weight: 500;
    }

    .shortcut-columns {
      display: flex;
      justify-content: space-between;
    }

    .shortcut-group {
      display: flex;
      flex-direction: column;
      gap: 6px;
    }

    .shortcut kbd {
      display: inline-block;
      min-width: 16px;
      padding: 1px 4px;
      font-family: monospace;
      text-align: center;
      background: rgba(0, 0, 0, 0.1);
      border-radius: 3px;
      margin-right: 6px;
    }

    .dark #shortcuts {
      color: rgba(255, 255, 255, 0.75);
    }

    .dark .shortcut kbd {
      background: rgba(255, 255, 255, 0.2);
    }

    @media only screen and (max-width: 400px) {
      input {
        width: 280px;
        font-size: 28px;
        line-height: 40px;
      }
      #wrap {
        width: 280px;
        margin-left: -140px;
        height: 180px;
        margin-top: -90px;
      }
    }
  </style>
</head>
<body>
  <div id="wrap">
    <input id="hex" type="text" placeholder="hex" autocomplete="off">
    <input id="rgb" type="text" placeholder="rgb" autocomplete="off">
    <div id="shortcuts">
      <span class="shortcut-title">shortcuts:</span>
      <div class="shortcut-columns">
        <div class="shortcut-group">
          <span class="shortcut"><kbd>u</kbd> #fff</span>
          <span class="shortcut"><kbd>i</kbd> 0xfff</span>
          <span class="shortcut"><kbd>o</kbd> fff</span>
        </div>
        <div class="shortcut-group">
          <span class="shortcut"><kbd>j</kbd> rgb(r, g, b)</span>
          <span class="shortcut"><kbd>k</kbd> r,g,b</span>
          <span class="shortcut"><kbd>l</kbd> r g b</span>
        </div>
      </div>
    </div>
  </div>

  <div id="visitor-counter">
    <div id="count-display"></div>
  </div>

  <script>
    const hexInput = document.getElementById('hex');
    const rgbInput = document.getElementById('rgb');

    // Parse hex in various formats
    function parseHex(hex) {
      // Remove any non-hex characters and handle 0x prefix
      hex = hex.replace(/^0x/i, '').replace(/[^0-9a-f]/gi, '');

      if (hex.length === 3) {
        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
      }
      if (!/^[0-9a-f]{6}$/i.test(hex)) return null;

      const r = parseInt(hex.slice(0, 2), 16);
      const g = parseInt(hex.slice(2, 4), 16);
      const b = parseInt(hex.slice(4, 6), 16);
      return [r, g, b];
    }

    // Parse RGB with format detection
    function parseRgb(input) {
      // Store the format for later use
      let format = 'rgb';  // default

      if (input.includes(',')) format = 'comma';
      else if (input.includes(' ')) format = 'space';

      // Extract numbers
      const numbers = input.split(/[^0-9.-]+/).filter(n => n !== '');
      if (numbers.length >= 3) {
        const rgb = numbers.slice(0, 3).map(n => parseInt(n));
        if (rgb.every(n => !isNaN(n) && n >= 0 && n <= 255)) {
          return { values: rgb, format };
        }
      }

      return null;
    }

    // Format RGB values according to specified format
    function formatRgb(rgb, format) {
      switch (format) {
        case 'rgb':
          return `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`;
        case 'comma':
          return `${rgb[0]}, ${rgb[1]}, ${rgb[2]}`;
        case 'space':
          return `${rgb[0]} ${rgb[1]} ${rgb[2]}`;
        default:
          return `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`;
      }
    }

    // Format hex values according to format
    function formatHex([r, g, b], format = '#') {
      const toHex = x => {
        const hex = x.toString(16).padStart(2, '0');
        return hex;
      };

      const hexStr = toHex(r) + toHex(g) + toHex(b);
      switch (format) {
        case '#':
          return '#' + hexStr;
        case '0x':
          return '0x' + hexStr;
        default:
          return hexStr;
      }
    }

    // Detect current hex format
    function detectHexFormat(hex) {
      if (hex.startsWith('0x')) return '0x';
      if (hex.startsWith('#')) return '#';
      return '';
    }

    // Detect current RGB format
    function detectRgbFormat(rgb) {
      if (rgb.startsWith('rgb')) return 'rgb';
      if (rgb.includes(',')) return 'comma';
      if (rgb.includes(' ')) return 'space';
      return 'rgb';  // default
    }

    // Calculate if background is dark
    function isDark(r, g, b) {
      const brightness = (r * 299 + g * 587 + b * 114) / 1000;
      return brightness < 125;
    }

        // Get current color values regardless of format
    function getCurrentColor() {
      // Try hex first
      let rgb = parseHex(hexInput.value);
      if (rgb) return rgb;

      // Try RGB next
      const result = parseRgb(rgbInput.value);
      if (result) return result.values;

      return null;
    }

    // Update the UI with new color
    function updateColor(rgb, sourceInput) {
      if (!rgb) return;

      // Preserve formats when updating
      if (sourceInput === hexInput) {
        const currentRgbFormat = detectRgbFormat(rgbInput.value);
        rgbInput.value = formatRgb(rgb, currentRgbFormat);
      } else {
        const currentHexFormat = detectHexFormat(hexInput.value);
        hexInput.value = formatHex(rgb, currentHexFormat);
      }

      // Update background
      document.body.style.backgroundColor = `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`;

      // Update text color based on brightness
      if (isDark(...rgb)) {
        document.body.classList.add('dark');
      } else {
        document.body.classList.remove('dark');
      }
    }

    // Handle hex input
    hexInput.addEventListener('input', (e) => {
      const rgb = parseHex(e.target.value);
      if (rgb) {
        updateColor(rgb, hexInput);
      }
    });

    // Handle RGB input
    rgbInput.addEventListener('input', (e) => {
      const result = parseRgb(e.target.value);
      if (result) {
        updateColor(result.values, rgbInput);
      }
    });

    // New keyboard shortcut handling
    document.addEventListener('keydown', (e) => {
      // Always prevent default for our shortcut keys if not in an input field
      if (!e.target.matches('input') && ['j', 'k', 'l', 'u', 'i', 'o'].includes(e.key)) {
        e.preventDefault();
      }
      
      const rgb = getCurrentColor();
      if (!rgb) return;

      // RGB format shortcuts
      if (e.key === 'j') {
        rgbInput.value = formatRgb(rgb, 'rgb');
        e.preventDefault();
      } else if (e.key === 'k') {
        rgbInput.value = formatRgb(rgb, 'comma');
        e.preventDefault();
      } else if (e.key === 'l') {
        rgbInput.value = formatRgb(rgb, 'space');
        e.preventDefault();
      }

      // HEX format shortcuts
      else if (e.key === 'i') {
        hexInput.value = formatHex(rgb, '0x');
        e.preventDefault();
      } else if (e.key === 'u') {
        hexInput.value = formatHex(rgb, '#');
        e.preventDefault();
      } else if (e.key === 'o') {
        hexInput.value = formatHex(rgb, '');
        e.preventDefault();
      }
    });
    
    // Generate a random color
    function getRandomColor() {
      const r = Math.floor(Math.random() * 256);
      const g = Math.floor(Math.random() * 256);
      const b = Math.floor(Math.random() * 256);
      return [r, g, b];
    }

    let lastKey = '';
    let logo = null;
    let posX = 20;
    let posY = 20;
    let velX = 1;
    let velY = 1;
    let animationId = null;

    function create() {
      if (logo) return;
      
      logo = document.createElement('div');
      logo.style.position = 'absolute';
      logo.style.width = '180px';
      logo.style.height = '60px';
      logo.style.backgroundColor = '#fb651e';
      logo.style.color = 'white';
      logo.style.display = 'flex';
      logo.style.alignItems = 'center';
      logo.style.justifyContent = 'center';
      logo.style.fontSize = '20px';
      logo.style.fontWeight = 'bold';
      logo.style.borderRadius = '4px';
      logo.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';
      logo.style.zIndex = '1000';
      logo.style.userSelect = 'none';
      logo.style.left = `${posX}px`;
      logo.style.top = `${posY}px`;
      logo.textContent = 'Hello, HN!';
      
      document.body.appendChild(logo);
    }

    function animate() {
      if (!logo) return;
      
      const maxX = window.innerWidth - logo.offsetWidth;
      const maxY = window.innerHeight - logo.offsetHeight;
      
      posX += velX;
      posY += velY;
      
      if (posX <= 0 || posX >= maxX) {
        velX = -velX;
        posX = posX <= 0 ? 0 : maxX;
      }
      
      if (posY <= 0 || posY >= maxY) {
        velY = -velY;
        posY = posY <= 0 ? 0 : maxY;
      }
      
      logo.style.left = `${posX}px`;
      logo.style.top = `${posY}px`;
      
      animationId = requestAnimationFrame(animate);
    }

    function activate() {
      document.body.style.backgroundColor = '#f6f6ef';
      document.body.classList.remove('dark');
      
      document.getElementById('wrap').innerHTML = '';
      
      create();
      animate();
    }

    document.addEventListener('keydown', (e) => {
      const currentKey = e.key.toLowerCase();
      
      if (lastKey === 'h' && currentKey === 'n') {
        activate();
      }
      
      lastKey = currentKey;
    });

    // Visitor counter with animation
    function setupCounter() {
      const visitorCounter = document.getElementById('visitor-counter');
      const countDisplay = document.getElementById('count-display');
      let currentValue = 0;
      let previousValue = 0;
      
      // Create digit containers
      for (let i = 0; i < 6; i++) {
        const digitContainer = document.createElement('div');
        digitContainer.className = 'digit-container';
        digitContainer.style.display = 'inline-block';
        digitContainer.style.position = 'relative';
        digitContainer.style.width = '0.6em';
        digitContainer.style.height = '1em';
        digitContainer.style.overflow = 'hidden';
        digitContainer.style.verticalAlign = 'top';
        
        // Create the two digit slots (current and next)
        const currentDigit = document.createElement('div');
        currentDigit.className = 'current-digit';
        currentDigit.style.position = 'absolute';
        currentDigit.style.top = '0';
        currentDigit.style.left = '0';
        currentDigit.style.width = '100%';
        currentDigit.style.transition = 'top 0.3s ease-in-out';
        currentDigit.textContent = '0';
        
        const nextDigit = document.createElement('div');
        nextDigit.className = 'next-digit';
        nextDigit.style.position = 'absolute';
        nextDigit.style.top = '100%';
        nextDigit.style.left = '0';
        nextDigit.style.width = '100%';
        nextDigit.style.transition = 'top 0.3s ease-in-out';
        nextDigit.textContent = '0';
        
        digitContainer.appendChild(currentDigit);
        digitContainer.appendChild(nextDigit);
        countDisplay.appendChild(digitContainer);
      }
      
      // Function to update the counter display
      function updateCounterDisplay(newValue, animate = true) {
        if (newValue === currentValue) return;
        
        previousValue = currentValue;
        currentValue = newValue;
        
        const prevDigits = previousValue.toString().padStart(6, '0');
        const newDigits = currentValue.toString().padStart(6, '0');
        
        const digitContainers = countDisplay.querySelectorAll('.digit-container');
        
        // Update each digit with animation if it changed
        for (let i = 0; i < 6; i++) {
          if (prevDigits[i] !== newDigits[i]) {
            const container = digitContainers[i];
            const currentDigit = container.querySelector('.current-digit');
            const nextDigit = container.querySelector('.next-digit');
            
            if (animate) {
              // Set the next digit value
              nextDigit.textContent = newDigits[i];
              
              // Start animation
              currentDigit.style.top = '-100%';
              nextDigit.style.top = '0';
              
              // Reset after animation completes
              setTimeout(() => {
                currentDigit.style.transition = 'none';
                nextDigit.style.transition = 'none';
                
                currentDigit.textContent = newDigits[i];
                currentDigit.style.top = '0';
                
                nextDigit.style.top = '100%';
                
                // Restore transitions
                setTimeout(() => {
                  currentDigit.style.transition = 'top 0.3s ease-in-out';
                  nextDigit.style.transition = 'top 0.3s ease-in-out';
                }, 20);
              }, 300);
            } else {
              // Update without animation
              currentDigit.textContent = newDigits[i];
              nextDigit.textContent = newDigits[i];
            }
          }
        }
      }
      
      // Fetch initial count from CountAPI
      fetch('https://api.countapi.xyz/get/airstrike-github-hex/visits')
        .then(response => response.json())
        .then(data => {
          const initialValue = data.value || 0;
          
          // Set initial value without animation
          updateCounterDisplay(initialValue, false);
          
          // Show the counter
          visitorCounter.style.opacity = '1';
          
          // After a short delay, increment and animate
          setTimeout(() => {
            // Increment the counter
            fetch('https://api.countapi.xyz/hit/airstrike-github-hex/visits')
              .then(response => response.json())
              .then(data => {
                // Animate to the incremented value
                updateCounterDisplay(data.value);
              });
          }, 1500);
        })
        .catch(() => {
          // Fallback to local storage if API fails
          const localCount = parseInt(localStorage.getItem('visitorCount') || '0');
          
          // Set initial value without animation
          updateCounterDisplay(localCount, false);
          
          // Show the counter
          visitorCounter.style.opacity = '1';
          
          // After a short delay, increment and animate
          setTimeout(() => {
            const newCount = localCount + 1;
            localStorage.setItem('visitorCount', newCount.toString());
            updateCounterDisplay(newCount);
          }, 1500);
        });
    }
    
    // Set random color and focus hex field on page load
    window.addEventListener('load', () => {
      const randomColor = getRandomColor();
      document.body.style.backgroundColor = `rgb(${randomColor[0]}, ${randomColor[1]}, ${randomColor[2]})`;
      
      // Update text color based on brightness
      if (isDark(...randomColor)) {
        document.body.classList.add('dark');
      } else {
        document.body.classList.remove('dark');
      }
      
      hexInput.focus();
      
      // Setup visitor counter
      setupCounter();
    });
  </script>
</body>
</html>
